"""Дан отсортированный массив различных целых чисел и целевое значение, вернуть индекс, если цель найдена. Если нет,
верните индекс туда, где он был бы, если бы он был вставлен по порядку.

Вы должны написать алгоритм со сложностью выполнения O(log n)."""
from typing import List


def searchInsert(nums: List[int], target: int) -> int:
    left, right = 0, len(nums) - 1  # Инициализация 2-х крайних элементов массива опорными

    while left <= right:  # Цикл работает, пока левый опорный элемент меньше или равен правому
        middle = (left + right) // 2  # Инициализация среднего опорного элемента

        if target == nums[middle]:  # Если искомое значение равно среднему опорному элементу
            return middle  # Среднее значение будет искомым

        if target > nums[middle]:  # Если искомое значение больше среднего опорного
            left = middle + 1  # Левый опорный элемент становится следующим после среднего
        else:
            right = middle - 1  # Правый опорный элемент становится предшествующим среднему

    return left  # Если левый опорный элемент больше правого, он является искомым значением


data1 = [1, 3, 5, 6, 7]
point1 = 5
data2 = [1, 3, 5, 6]
point2 = 2
data3 = [1, 3, 5, 6]
point3 = 7

print(searchInsert(data1, point1))
print(searchInsert(data2, point2))
print(searchInsert(data3, point3))
